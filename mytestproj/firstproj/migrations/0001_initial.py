# Generated by Django 3.0.4 on 2020-05-11 16:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ApiInfo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='步骤名称')),
                ('requestType', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST')], max_length=50, verbose_name='请求方式')),
                ('AllowRedirects', models.BooleanField(choices=[(True, '跳转'), (False, '不跳转')], default=True, verbose_name='允许跳转')),
                ('url', models.CharField(max_length=50, verbose_name='接口地址')),
                ('data', models.TextField(blank=True, null=True, verbose_name='内容')),
                ('description', models.TextField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('createtime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('creater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='createapi', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '接口',
                'verbose_name_plural': '接口管理',
            },
        ),
        migrations.CreateModel(
            name='Extracts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=50, verbose_name='变量名')),
                ('value', models.CharField(max_length=1024, verbose_name='匹配值')),
            ],
        ),
        migrations.CreateModel(
            name='Headers',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=50, verbose_name='参数')),
                ('value', models.CharField(max_length=1024, verbose_name='值')),
            ],
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('casename', models.CharField(max_length=50, verbose_name='用例名称')),
                ('path', models.CharField(blank=True, max_length=50, null=True, verbose_name='路径')),
                ('base_url', models.CharField(blank=True, max_length=50, null=True, verbose_name='base_url')),
                ('createtime', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('creater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='createcase', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('relateapi', models.ManyToManyField(blank=True, related_name='apis_case', to='firstproj.ApiInfo', verbose_name='关联api')),
            ],
            options={
                'verbose_name': '用例',
                'verbose_name_plural': '测试用例管理',
            },
        ),
        migrations.CreateModel(
            name='Validates',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('AssertMode', models.CharField(choices=[('eq', 'eq')], default='eq', max_length=50, verbose_name='校验方式')),
                ('AssertKey', models.CharField(max_length=50, verbose_name='校验参数')),
                ('AssertValue', models.CharField(max_length=50, verbose_name='预期值')),
            ],
        ),
        migrations.CreateModel(
            name='Variables',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=50, verbose_name='参数')),
                ('value', models.CharField(max_length=1024, verbose_name='值')),
            ],
            options={
                'verbose_name': '变量',
                'verbose_name_plural': '变量管理',
            },
        ),
        migrations.CreateModel(
            name='TestSuite',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('suitename', models.CharField(max_length=50, verbose_name='测试套件名')),
                ('path', models.CharField(blank=True, max_length=50, null=True, verbose_name='路径')),
                ('description', models.TextField(blank=True, max_length=1024, null=True, verbose_name='描述')),
                ('createtime', models.DateField(auto_now_add=True, verbose_name='创建时间')),
                ('runcount', models.IntegerField(default=0, verbose_name='运行次数')),
                ('runtime', models.DateTimeField(auto_now=True, null=True, verbose_name='最后运行时间')),
                ('creater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='createsuite', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('testcase', models.ManyToManyField(blank=True, related_name='case_suite', to='firstproj.TestCase', verbose_name='关联用例')),
                ('variables', models.ManyToManyField(blank=True, to='firstproj.Variables', verbose_name='参数')),
            ],
            options={
                'verbose_name': '测试套件',
                'verbose_name_plural': '测试套件管理',
            },
        ),
        migrations.CreateModel(
            name='TestReport',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('result', models.BooleanField(choices=[(True, '成功'), (False, '失败')], verbose_name='测试进度')),
                ('reportname', models.CharField(max_length=1024, verbose_name='测试报告名')),
                ('case_count', models.IntegerField(null=True, verbose_name='总用例数量')),
                ('succeescase_count', models.IntegerField(null=True, verbose_name='成功用例数量')),
                ('failcase_count', models.IntegerField(null=True, verbose_name='失败用例数量')),
                ('step_count', models.IntegerField(null=True, verbose_name='总步骤数量')),
                ('succeesstep_count', models.IntegerField(null=True, verbose_name='成功步骤数量')),
                ('failstep_count', models.IntegerField(null=True, verbose_name='失败步骤数量')),
                ('errorstep_count', models.IntegerField(null=True, verbose_name='错误步骤数量')),
                ('skipstep_count', models.IntegerField(null=True, verbose_name='跳过步骤数量')),
                ('report_data', models.FileField(upload_to='', verbose_name='测试报告文件')),
                ('run_time', models.DateTimeField(auto_now_add=True, verbose_name='测试时间')),
                ('fail_case', models.ManyToManyField(blank=True, related_name='fail_case_report', to='firstproj.TestCase', verbose_name='失败用例')),
                ('fail_step', models.ManyToManyField(blank=True, related_name='fail_step_report', to='firstproj.ApiInfo', verbose_name='失败步骤')),
                ('succees_case', models.ManyToManyField(blank=True, related_name='succees_case_report', to='firstproj.TestCase', verbose_name='成功用例')),
                ('succees_step', models.ManyToManyField(blank=True, related_name='succees_step_report', to='firstproj.ApiInfo', verbose_name='成功步骤')),
                ('testcase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='testcase_result', to='firstproj.TestCase', verbose_name='测试用例')),
                ('testsuite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='testsuite_result', to='firstproj.TestSuite', verbose_name='测试套件')),
            ],
            options={
                'verbose_name': '测试报告',
                'verbose_name_plural': '测试报告管理',
            },
        ),
        migrations.AddField(
            model_name='testcase',
            name='variables',
            field=models.ManyToManyField(blank=True, to='firstproj.Variables', verbose_name='参数'),
        ),
        migrations.AddField(
            model_name='apiinfo',
            name='extracts',
            field=models.ManyToManyField(blank=True, to='firstproj.Extracts', verbose_name='继承变量'),
        ),
        migrations.AddField(
            model_name='apiinfo',
            name='headers',
            field=models.ManyToManyField(blank=True, to='firstproj.Headers', verbose_name='头信息'),
        ),
        migrations.AddField(
            model_name='apiinfo',
            name='validates',
            field=models.ManyToManyField(blank=True, to='firstproj.Validates', verbose_name='校验点'),
        ),
    ]
